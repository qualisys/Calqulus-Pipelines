# It is assumed that only one FP is loaded

############
## SPACES ##
############

# We can't use space as we do not have skeleton

# - space: VirtualLab
#   alignWithSegment:
#     segment: Hips

############
## EVENTS ##
############

- event: BOF
  steps:
    - import: [0]

- event: EOF
  steps:
    - subtract: [$length, 1]

# Unified event names for web
- event: LeftPlotStart
  set: left
  where:
    name: Balance_B*
  steps:
    - import: BOF

- event: LeftPlotEnd
  set: left
  where:
    name: Balance_B*
  steps:
    - import: EOF

- event: LeftPlotStart
  set: left
  where:
    name: ^(Balance|Y Balance)_L*
  steps:
    - import: BOF

- event: LeftPlotEnd
  set: left
  where:
    name: ^(Balance|Y Balance)_L*
  steps:
    - import: EOF

- event: RightPlotStart
  set: right
  where:
    name: ^(Balance|Y Balance)_R*
  steps:
    - import: BOF

- event: RightPlotEnd
  set: right
  where:
    name: ^(Balance|Y Balance)_R*
  steps:
    - import: EOF

############
## SERIES ##
############

# find out which FP is loaded
# it is assumed that only two FPs are connected to the system
- parameter: COP_FP1
  where:
    name: ^(Balance_|Y Balance_)[LR]*
  steps:
    - if: exists(ForcePlate1)
      then: ForcePlate1.fz
      else: [[0]]
    - mean:
    - abs:

- parameter: COP_FP2
  where:
    name: ^(Balance_|Y Balance_)[LR]*
  steps:
    - if: exists(ForcePlate2)
      then: ForcePlate2.fz
      else: [[0]]
    - mean:
    - abs:

- parameter: COP_direct
  where:
    name: ^(Balance_|Y Balance_)[LR]*
  steps:
    - if: (COP_FP1 > COP_FP2)
      then: ForcePlate1
      else: ForcePlate2
    - vector: [$prev.x, $prev.y, $prev.z]
    - lowpass:
      cutoff: 10
      extrapolate: 75

# Calculate combined COP for double leg balance (it is assumed that both FPs are loaded)
- parameter: COP_direct
  where: 
    name: Balance_B*
  steps:
    - vector: [ForcePlate1.fx, ForcePlate1.fy, ForcePlate1.fz]
    - magnitude:
      output: fp1_mag
    - vector: [ForcePlate2.fx, ForcePlate2.fy, ForcePlate2.fz]
    - magnitude:
      output: fp2_mag

    - vector: [ForcePlate1.x, ForcePlate1.y, ForcePlate1.z]
    - multiply: [$prev, [fp1_mag, fp1_mag, fp1_mag]]
      output: l_temp
    - vector: [ForcePlate2.x, ForcePlate2.y, ForcePlate2.z]
    - multiply: [$prev, [fp2_mag, fp2_mag, fp2_mag]]
      output: r_temp

    - add: [l_temp, r_temp]
      output: temp_sum
    - add: [fp1_mag, fp2_mag]
      output: grf_sum
    - divide: [temp_sum, [grf_sum, grf_sum, grf_sum]]
    - lowpass:
      cutoff: 10
      extrapolate: 75

- parameter: COP_zeroed
  steps:
    - import: COP_direct
    - convert:
      from: mm
      to: m
    - multiply: [$prev, [1,1,0]]
    - median:
    - subtract: [$prev(2), $prev]

#############
## METRICS ##
#############

- parameter: Measurement_length
  steps:
    - divide: [$length, $framerate]

- parameter: COP_zeroed_vel_filt_mag_max
  steps:
    - velocity: COP_zeroed
    - lowpass:
      cutoff: 6
      extrapolate: 100
      output: COP_zeroed_vel_filt
    - max:
      export: COP_zeroed_vel_filt_max
    - mean: COP_zeroed_vel_filt
      export: COP_zeroed_vel_filt_mean
    - magnitude: COP_zeroed_vel_filt
    - mean:
      export: COP_zeroed_vel_filt_mag_mean
    - max: $prev(2)

- parameter: COP_zeroed_acc_filt_mag_max
  steps:
    - acceleration: COP_zeroed
    - lowpass:
      cutoff: 6
      output: COP_zeroed_acc_filt
      extrapolate: 100
    - max:
      export: COP_zeroed_acc_filt_max
    - mean: COP_zeroed_acc_filt
      export: COP_zeroed_acc_filt_mean
    - magnitude: COP_zeroed_acc_filt
    - mean:
      export: COP_zeroed_acc_filt_mag_mean
    - max: $prev(2)

- parameter: COP_range
  steps:
    - min: COP_zeroed
    - max: COP_zeroed
    - subtract: [$prev, $prev(2)]

# Dynamic Postural Stability Index -----------
# Based on Erik A Wikstrom, Mark A Arrigenna,Mark D Tillman, and Paul A Borsa: Dynamic Postural Stability in Subjects With Braced, Functionally Unstable Ankles. J Athl Train. 2006; 41(3): 245â€“250. 

# find out which plate is loaded
- parameter: loaded_FP
  where:
    name: ^(Balance_|Y Balance_)[LR]*
  steps:
    - if: (COP_FP1 > COP_FP2)
      then: ForcePlate1
      else: ForcePlate2
    - lowpass:
    - vector: [$prev.fx, $prev.fy, $prev.fz]

- parameter: loaded_FP
  where:
    name: Balance_B*
  steps:
    - vector: [ForcePlate1.fx, ForcePlate1.fy, ForcePlate1.fz]
    - vector: [ForcePlate2.fx, ForcePlate2.fy, ForcePlate2.fz]
    - add: [$prev, $prev(2)]
    - lowpass:
    
- parameter: DPSI
  steps:
    - multiply: [$bodyMass, 9.81]
      output: bw

    - vector: [loaded_FP.x, loaded_FP.y, loaded_FP.z]
    - negate:
      output: my_force

    - subtract: [0, my_force]
    - power:
    - sum:
      output: FS

    - subtract: [bw, my_force.z]
    - power:
    - sum:
      output: FSZ
    - concatenate: [FS.x, FS.y, FSZ]
    - sum:
      output: FP_SUM_ALL

    # get number of force frames
    - multiply: [Measurement_length, $framerate]
      output: nframe

    - sqrt: FP_SUM_ALL
    - divide: [$prev, nframe]
